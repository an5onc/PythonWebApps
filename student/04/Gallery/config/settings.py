"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os  # Import os to handle environment variables

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ------------------------------------------------------------------------------
# SECURITY WARNING: keep the secret key used in production secret!
# It's recommended to retrieve the secret key from environment variables for security.
# ------------------------------------------------------------------------------

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-9tpnvsz5y5vy%45zq&m=5)df8yf3@8%-a(jcyt2&em)hj1y7f9')

# ------------------------------------------------------------------------------
# SECURITY WARNING: don't run with debug turned on in production!
# It's best to control DEBUG via an environment variable.
# ------------------------------------------------------------------------------

# Retrieve DEBUG setting from environment variable; default to False for safety.
DEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'

# ------------------------------------------------------------------------------
# ALLOWED_HOSTS
# Define the list of hosts/domain names your Django site can serve.
# In production, specify your domain(s) instead of using '*' for security.
# ------------------------------------------------------------------------------

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '*').split(',')

# ------------------------------------------------------------------------------
# Application definition
# ------------------------------------------------------------------------------

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'photos',  # Your custom app
    'crispy_forms',  # If using django-crispy-forms for better form rendering
]

# ------------------------------------------------------------------------------
# Middleware
# ------------------------------------------------------------------------------
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise middleware for serving static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ------------------------------------------------------------------------------
# Root URL configuration
# ------------------------------------------------------------------------------
ROOT_URLCONF = 'config.urls'

# ------------------------------------------------------------------------------
# Login and Logout Redirect URLs
# ------------------------------------------------------------------------------
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# ------------------------------------------------------------------------------
# Templates Configuration
# ------------------------------------------------------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Specify a global templates directory if needed
        'APP_DIRS': True,  # Automatically look for templates in each app's 'templates' directory
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',  # Required by allauth
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ------------------------------------------------------------------------------
# WSGI Application
# ------------------------------------------------------------------------------
WSGI_APPLICATION = 'config.wsgi.application'

# ------------------------------------------------------------------------------
# Database
# ------------------------------------------------------------------------------
# It's recommended to use environment variables to configure the database in production.
# Here, we'll use SQLite for simplicity, but switch to PostgreSQL or another robust DB in production.
# ------------------------------------------------------------------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# ------------------------------------------------------------------------------
# Password validation
# ------------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ------------------------------------------------------------------------------
# Internationalization
# ------------------------------------------------------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ------------------------------------------------------------------------------
# Static files (CSS, JavaScript, Images)
# ------------------------------------------------------------------------------
# URL to use when referring to static files located in STATIC_ROOT.
STATIC_URL = '/static/'

# The directory where collectstatic will collect static files for deployment.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Additional locations the staticfiles app will traverse to collect static files.
# Useful during development; can be omitted or left empty in production.
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Optional: for development use only
]

# Simplified static file serving using WhiteNoise.
# Compresses static files and creates unique names for caching.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# ------------------------------------------------------------------------------
# Default primary key field type
# ------------------------------------------------------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ------------------------------------------------------------------------------
# Additional Settings for Production
# ------------------------------------------------------------------------------

# Security settings
if not DEBUG:
    # Ensure that HTTPS is used
    SECURE_SSL_REDIRECT = True  # Redirect all non-HTTPS requests to HTTPS
    SESSION_COOKIE_SECURE = True  # Use secure cookies
    CSRF_COOKIE_SECURE = True  # Use secure CSRF cookies
    SECURE_HSTS_SECONDS = 31536000  # HTTP Strict Transport Security
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True

    # Allowed Hosts should not be '*'; specify your domain(s)
    if ALLOWED_HOSTS == ['*']:
        raise Exception("ALLOWED_HOSTS must be set to your domain(s) in production.")

# ------------------------------------------------------------------------------
# Logging Configuration (Optional but Recommended)
# ------------------------------------------------------------------------------
# Configure logging to help with debugging and monitoring
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Retain default loggers
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
    },
}

# ------------------------------------------------------------------------------
# Caching Configuration (Optional for Performance)
# ------------------------------------------------------------------------------
# Example: Simple in-memory caching; consider using Redis or Memcached in production
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# ------------------------------------------------------------------------------
# Email Backend Configuration (Optional for Sending Emails)
# ------------------------------------------------------------------------------
# Example: Console backend for development; configure SMTP or other backends in production
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' if DEBUG else 'django.core.mail.backends.smtp.EmailBackend'

# ------------------------------------------------------------------------------
# Static Files Handling with WhiteNoise
# ------------------------------------------------------------------------------
# WhiteNoise allows your web app to serve its own static files, making it a self-contained unit that can be deployed anywhere without relying on nginx, Apache, or any other external server.
# ------------------------------------------------------------------------------
# Ensure WhiteNoise is added to MIDDLEWARE as shown above.

# ------------------------------------------------------------------------------
# Additional Notes:
# ------------------------------------------------------------------------------
# 1. **Environment Variables:**
#    - It's crucial to manage sensitive information (like SECRET_KEY, DEBUG, ALLOWED_HOSTS) using environment variables.
#    - Consider using packages like `django-environ` or `python-decouple` to manage environment variables more effectively.
#
# 2. **Database Configuration:**
#    - For production, switch from SQLite to a more robust database like PostgreSQL.
#    - Example configuration using environment variables:
#      ```python
#      DATABASES = {
#          'default': {
#              'ENGINE': 'django.db.backends.postgresql_psycopg2',
#              'NAME': os.getenv('POSTGRES_DB'),
#              'USER': os.getenv('POSTGRES_USER'),
#              'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
#              'HOST': os.getenv('POSTGRES_HOST'),
#              'PORT': os.getenv('POSTGRES_PORT', '5432'),
#          }
#      }
#      ```
#
# 3. **Static Files Deployment:**
#    - Ensure that the `collectstatic` command is run during the deployment process.
#    - The `STATIC_ROOT` directory (`staticfiles` in this case) is where all static files will be collected.
#    - WhiteNoise will serve these static files efficiently.
#
# 4. **Templates Directory:**
#    - If you have a global `templates` directory, ensure it's included in the `DIRS` list.
#    - This allows Django to find templates outside of individual apps.
#
# 5. **Crispy Forms (Optional):**
#    - If you're using `django-crispy-forms`, ensure it's configured properly.
#    - Example configuration:
#      ```python
#      CRISPY_TEMPLATE_PACK = 'bootstrap4'
#      ```
#
# 6. **Allowed Hosts:**
#    - In production, replace `'*'` with your actual domain(s) to enhance security.
#    - Example:
#      ```python
#      ALLOWED_HOSTS = ['yourdomain.com', 'www.yourdomain.com']
#      ```
#
# 7. **Handling Static Files Locally:**
#    - During development, `STATICFILES_DIRS` allows Django to find static files in additional directories.
#    - In production, `collectstatic` gathers all static files into `STATIC_ROOT`.
#
# 8. **Debugging:**
#    - Ensure `DEBUG` is set to `False` in production to prevent the display of sensitive information.
#
# 9. **Security:**
#    - Always use a strong, unique `SECRET_KEY` in production.
#    - Avoid hardcoding sensitive settings; use environment variables instead.
#
# By implementing these changes and following the best practices outlined, your Django application should handle static files correctly during deployment, and you'll have a more secure and maintainable configuration.